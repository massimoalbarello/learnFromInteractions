import * as WoT from "wot-typescript-definitions";
import * as TD from "@node-wot/td-tools";
import Servient from "./servient";
import { ProtocolClient } from "./protocol-interfaces";
export default class ConsumedThing extends TD.Thing implements WoT.ConsumedThing {
    properties: {
        [key: string]: TD.ThingProperty;
    };
    actions: {
        [key: string]: TD.ThingAction;
    };
    events: {
        [key: string]: TD.ThingEvent;
    };
    private getServient;
    private getClients;
    constructor(servient: Servient);
    getThingDescription(): WoT.ThingDescription;
    emitEvent(name: string, data: any): void;
    extendInteractions(): void;
    getClientFor(forms: Array<TD.Form>, op: string): ClientAndForm;
    readProperty(propertyName: string, options?: WoT.InteractionOptions): Promise<any>;
    _readProperties(propertyNames: string[]): Promise<WoT.PropertyValueMap>;
    readAllProperties(options?: WoT.InteractionOptions): Promise<WoT.PropertyValueMap>;
    readMultipleProperties(propertyNames: string[], options?: WoT.InteractionOptions): Promise<WoT.PropertyValueMap>;
    writeProperty(propertyName: string, value: any, options?: WoT.InteractionOptions): Promise<void>;
    writeMultipleProperties(valueMap: WoT.PropertyValueMap, options?: WoT.InteractionOptions): Promise<void>;
    invokeAction(actionName: string, parameter?: any, options?: WoT.InteractionOptions): Promise<any>;
    observeProperty(name: string, listener: WoT.WotListener, options?: WoT.InteractionOptions): Promise<void>;
    unobserveProperty(name: string): Promise<void>;
    subscribeEvent(name: string, listener: WoT.WotListener, options?: WoT.InteractionOptions): Promise<void>;
    unsubscribeEvent(name: string): Promise<void>;
    handleUriVariables(form: TD.Form, parameter: any): TD.Form;
}
export interface ClientAndForm {
    client: ProtocolClient;
    form: TD.Form;
}
